{"version":3,"sources":["components/Loader.js","pages/Overlay/Overlay.js","pages/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["Loader","className","Overlay","CSSTransition","appear","in","timeout","classNames","fontSize","style","padding","Home","App","React","useState","loading","setLoading","useEffect","setTimeout","licenseKey","scrollingSpeed","render","state","fullpageApi","Wrapper","Boolean","window","location","hostname","match","application","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0UASeA,G,MANA,kBACb,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,UAAf,iB,uCCmBWC,EAlBC,WACd,OACE,kBAACC,EAAA,EAAD,CAAeC,QAAM,EAACC,IAAE,EAACC,QAAS,IAAKC,WAAW,MAChD,yBAAKN,UAAU,WACb,kBAACE,EAAA,EAAD,CAAeC,QAAM,EAACC,IAAE,EAACC,QAAS,KAAMC,WAAW,MACjD,yBAAKN,UAAU,QAAf,sGAEF,kBAACE,EAAA,EAAD,CAAeC,QAAM,EAACC,IAAE,EAACC,QAAS,KAAMC,WAAW,MACjD,yBAAKN,UAAU,UAAf,wBAEF,kBAACE,EAAA,EAAD,CAAeC,QAAM,EAACC,IAAE,EAACC,QAAS,KAAMC,WAAW,MACjD,kBAAC,IAAD,CAAuBC,SAAS,QAAQC,MAAO,CAACC,QAAS,cCVpDC,G,MAJF,WACX,OAAO,yBAAKV,UAAU,QAAf,U,gBCqCMW,EAnCH,WAAO,IAAD,EACcC,IAAMC,UAAS,GAD7B,mBACTC,EADS,KACAC,EADA,KAShB,OANAC,qBAAU,WACRC,YAAW,WACTF,GAAW,KACV,QAIH,yBAAKf,UAAU,OACZc,GAAW,kBAAC,EAAD,MACXA,EAAU,KACT,kBAAC,IAAD,CAEEI,WAAY,gBACZC,eAAgB,IAChBC,OAAQ,YAA4B,EAAzBC,MAAyB,EAAlBC,YAChB,OACE,kBAAC,IAAcC,QAAf,KACE,yBAAKvB,UAAU,WACb,kBAAC,EAAD,OAEF,yBAAKA,UAAU,WACb,kBAAC,EAAD,aClBEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVAC,EACJ,kBAAC,IAAD,KACE,kBAAC,EAAD,OAIJC,IAASV,OAAOS,EAAaE,SAASC,eAAe,SDqH/C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.57e0e6bb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Loader.css';\r\n\r\nconst Loader = () => (\r\n  <div className=\"loader-wrapper\">\r\n    <div className=\"loader\">Loading...</div>\r\n  </div>\r\n);\r\n\r\nexport default Loader;\r\n","import React from 'react';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport './Overlay.css';\r\nimport './Overlay-media.css';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\n\r\nconst Overlay = () => {\r\n  return (\r\n    <CSSTransition appear in timeout={500} classNames=\"tr\">\r\n      <div className=\"Overlay\">\r\n        <CSSTransition appear in timeout={1500} classNames=\"tr\">\r\n          <div className=\"name\">Аксенов Александр</div>\r\n        </CSSTransition>\r\n        <CSSTransition appear in timeout={2500} classNames=\"tr\">\r\n          <div className=\"slogan\">Amazing Web For You</div>\r\n        </CSSTransition>\r\n        <CSSTransition appear in timeout={4500} classNames=\"ta\">\r\n          <KeyboardArrowDownIcon fontSize='large' style={{padding: '20px'}} />\r\n        </CSSTransition>\r\n      </div>\r\n    </CSSTransition>\r\n  );\r\n};\r\n\r\nexport default Overlay;\r\n","import React from 'react';\r\nimport './Home.css';\r\n\r\nconst Home = () => {\r\n  return <div className=\"Home\">Home</div>;\r\n};\r\n\r\nexport default Home;\r\n","import React, { useEffect } from 'react';\nimport Loader from './components/Loader';\nimport Overlay from './pages/Overlay/Overlay';\nimport Home from './pages/Home/Home';\nimport ReactFullpage from '@fullpage/react-fullpage';\n\nconst App = () => {\n  const [loading, setLoading] = React.useState(true);\n\n  useEffect(() => {\n    setTimeout(() => {\n      setLoading(false);\n    }, 3000);\n  });\n\n  return (\n    <div className=\"App\">\n      {loading && <Loader />}\n      {loading ? null : (\n        <ReactFullpage\n          //fullpage options\n          licenseKey={'YOUR_KEY_HERE'}\n          scrollingSpeed={1000}\n          render={({ state, fullpageApi }) => {\n            return (\n              <ReactFullpage.Wrapper>\n                <div className=\"section\">\n                  <Overlay />\n                </div>\n                <div className=\"section\">\n                  <Home />\n                </div>\n              </ReactFullpage.Wrapper>\n            );\n          }}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './assets/fonts/fonts.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst application = (\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);\n\nReactDOM.render(application, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}